AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Meeca Backend Serverless Application

Parameters:
  BucketName:
    Type: String
    Default: meeca2-dev
    Description: Name of the S3 bucket for storing avatars
  DynamoDBTableName:
    Type: String
    Default: MeecaApp
    Description: Name of the existing DynamoDB table

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        ENV: "local"
        ALLOWED_HOSTS: "*"
        ALLOWED_ORIGIN: "http://localhost:3000"
        TABLE_NAME: !Ref DynamoDBTableName
        BUCKET_NAME: !Ref BucketName
        AWS_SAM_LOCAL: "true"
        AWS_REGION: "us-west-1"
        COGNITO_USER_POOL_ID: "us-west-1_OhDnHEXLi"
        COGNITO_USER_POOL_CLIENT_ID: "6cgbaguv56185c18o0q7khb9c8"
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'http://localhost:3000'"
    BinaryMediaTypes:
      - multipart/form-data
      - image/jpeg
      - image/png
      - image/gif

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MeecaApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Local
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'http://localhost:3000'"
      Auth:
        DefaultAuthorizer: BaseUserRequestAuth
        Authorizers:
          BaseUserRequestAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt BaseUserRequestFunction.Arn
          AdminUserRequestAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AdminUserRequestFunction.Arn
        AddDefaultAuthorizerToCorsPreflight: False

  # Authorizer functions
  BaseUserRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/permissions/
      Handler: api.base_user.base_user_handler
      Runtime: python3.9
      Policies:
        - AWSLambdaBasicExecutionRole

  AdminUserRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/permissions/
      Handler: api.admin_user.admin_user_handler
      Runtime: python3.9
      Policies:
        - AWSLambdaBasicExecutionRole

  # Example function with auth
  AvatarsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/avatars/
      Handler: handler.avatar_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        AvatarsPost:
          Type: Api
          Properties:
            RestApiId: !Ref MeecaApi
            Path: /avatars/create
            Method: POST
            Auth:
              Authorizer: AdminUserRequestAuth
